// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package Domain is a generated GoMock package.
package Mocks

import (
	Models "mereb/Domain/Models"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockPersonRepository is a mock of PersonRepository interface.
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository.
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance.
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonRepository) CreatePerson(person Models.Person) (Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonRepositoryMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonRepository)(nil).CreatePerson), person)
}

// DeletePerson mocks base method.
func (m *MockPersonRepository) DeletePerson(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonRepositoryMockRecorder) DeletePerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonRepository)(nil).DeletePerson), id)
}

// GetAllPersons mocks base method.
func (m *MockPersonRepository) GetAllPersons() ([]Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPersons")
	ret0, _ := ret[0].([]Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPersons indicates an expected call of GetAllPersons.
func (mr *MockPersonRepositoryMockRecorder) GetAllPersons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersons", reflect.TypeOf((*MockPersonRepository)(nil).GetAllPersons))
}

// GetPersonByID mocks base method.
func (m *MockPersonRepository) GetPersonByID(id string) (Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByID", id)
	ret0, _ := ret[0].(Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByID indicates an expected call of GetPersonByID.
func (mr *MockPersonRepositoryMockRecorder) GetPersonByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByID", reflect.TypeOf((*MockPersonRepository)(nil).GetPersonByID), id)
}

// UpdatePerson mocks base method.
func (m *MockPersonRepository) UpdatePerson(id string, person Models.Person) (Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", id, person)
	ret0, _ := ret[0].(Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonRepositoryMockRecorder) UpdatePerson(id, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonRepository)(nil).UpdatePerson), id, person)
}

// MockPersonUsecase is a mock of PersonUsecase interface.
type MockPersonUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPersonUsecaseMockRecorder
}

// MockPersonUsecaseMockRecorder is the mock recorder for MockPersonUsecase.
type MockPersonUsecaseMockRecorder struct {
	mock *MockPersonUsecase
}

// NewMockPersonUsecase creates a new mock instance.
func NewMockPersonUsecase(ctrl *gomock.Controller) *MockPersonUsecase {
	mock := &MockPersonUsecase{ctrl: ctrl}
	mock.recorder = &MockPersonUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonUsecase) EXPECT() *MockPersonUsecaseMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonUsecase) CreatePerson(person Models.Person) (Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonUsecaseMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonUsecase)(nil).CreatePerson), person)
}

// DeletePerson mocks base method.
func (m *MockPersonUsecase) DeletePerson(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonUsecaseMockRecorder) DeletePerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonUsecase)(nil).DeletePerson), id)
}

// GetAllPersons mocks base method.
func (m *MockPersonUsecase) GetAllPersons() ([]Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPersons")
	ret0, _ := ret[0].([]Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPersons indicates an expected call of GetAllPersons.
func (mr *MockPersonUsecaseMockRecorder) GetAllPersons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersons", reflect.TypeOf((*MockPersonUsecase)(nil).GetAllPersons))
}

// GetPersonByID mocks base method.
func (m *MockPersonUsecase) GetPersonByID(id string) (Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByID", id)
	ret0, _ := ret[0].(Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByID indicates an expected call of GetPersonByID.
func (mr *MockPersonUsecaseMockRecorder) GetPersonByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByID", reflect.TypeOf((*MockPersonUsecase)(nil).GetPersonByID), id)
}

// UpdatePerson mocks base method.
func (m *MockPersonUsecase) UpdatePerson(id string, person Models.Person) (Models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", id, person)
	ret0, _ := ret[0].(Models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonUsecaseMockRecorder) UpdatePerson(id, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonUsecase)(nil).UpdatePerson), id, person)
}

// MockPersonController is a mock of PersonController interface.
type MockPersonController struct {
	ctrl     *gomock.Controller
	recorder *MockPersonControllerMockRecorder
}

// MockPersonControllerMockRecorder is the mock recorder for MockPersonController.
type MockPersonControllerMockRecorder struct {
	mock *MockPersonController
}

// NewMockPersonController creates a new mock instance.
func NewMockPersonController(ctrl *gomock.Controller) *MockPersonController {
	mock := &MockPersonController{ctrl: ctrl}
	mock.recorder = &MockPersonControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonController) EXPECT() *MockPersonControllerMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonController) CreatePerson(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreatePerson", ctx)
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonControllerMockRecorder) CreatePerson(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonController)(nil).CreatePerson), ctx)
}

// DeletePerson mocks base method.
func (m *MockPersonController) DeletePerson(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePerson", ctx)
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonControllerMockRecorder) DeletePerson(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonController)(nil).DeletePerson), ctx)
}

// GetAllPersons mocks base method.
func (m *MockPersonController) GetAllPersons(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllPersons", ctx)
}

// GetAllPersons indicates an expected call of GetAllPersons.
func (mr *MockPersonControllerMockRecorder) GetAllPersons(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersons", reflect.TypeOf((*MockPersonController)(nil).GetAllPersons), ctx)
}

// GetPerson mocks base method.
func (m *MockPersonController) GetPerson(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPerson", ctx)
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockPersonControllerMockRecorder) GetPerson(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockPersonController)(nil).GetPerson), ctx)
}

// RouteDoesNotExist mocks base method.
func (m *MockPersonController) RouteDoesNotExist(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RouteDoesNotExist", ctx)
}

// RouteDoesNotExist indicates an expected call of RouteDoesNotExist.
func (mr *MockPersonControllerMockRecorder) RouteDoesNotExist(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteDoesNotExist", reflect.TypeOf((*MockPersonController)(nil).RouteDoesNotExist), ctx)
}

// UpdatePerson mocks base method.
func (m *MockPersonController) UpdatePerson(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePerson", ctx)
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonControllerMockRecorder) UpdatePerson(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonController)(nil).UpdatePerson), ctx)
}
