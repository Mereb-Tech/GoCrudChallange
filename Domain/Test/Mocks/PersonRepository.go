// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "mereb/Domain/Models"

	mock "github.com/stretchr/testify/mock"
)

// PersonRepository is an autogenerated mock type for the PersonRepository type
type PersonRepository struct {
	mock.Mock
}

// CreatePerson provides a mock function with given fields: person
func (_m *PersonRepository) CreatePerson(person models.Person) (models.Person, error) {
	ret := _m.Called(person)

	if len(ret) == 0 {
		panic("no return value specified for CreatePerson")
	}

	var r0 models.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Person) (models.Person, error)); ok {
		return rf(person)
	}
	if rf, ok := ret.Get(0).(func(models.Person) models.Person); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Get(0).(models.Person)
	}

	if rf, ok := ret.Get(1).(func(models.Person) error); ok {
		r1 = rf(person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePerson provides a mock function with given fields: id
func (_m *PersonRepository) DeletePerson(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePerson")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPersons provides a mock function with given fields:
func (_m *PersonRepository) GetAllPersons() ([]models.Person, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPersons")
	}

	var r0 []models.Person
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Person, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Person)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersonByID provides a mock function with given fields: id
func (_m *PersonRepository) GetPersonByID(id string) (models.Person, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonByID")
	}

	var r0 models.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Person, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Person); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Person)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePerson provides a mock function with given fields: id, person
func (_m *PersonRepository) UpdatePerson(id string, person models.Person) (models.Person, error) {
	ret := _m.Called(id, person)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePerson")
	}

	var r0 models.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Person) (models.Person, error)); ok {
		return rf(id, person)
	}
	if rf, ok := ret.Get(0).(func(string, models.Person) models.Person); ok {
		r0 = rf(id, person)
	} else {
		r0 = ret.Get(0).(models.Person)
	}

	if rf, ok := ret.Get(1).(func(string, models.Person) error); ok {
		r1 = rf(id, person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonRepository creates a new instance of PersonRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersonRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersonRepository {
	mock := &PersonRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
